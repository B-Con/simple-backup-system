#!/bin/sh

#
# This script executes a group of backup scripts. Expects 1 argument specifying
# the group *name*.
#

# ==============================================================================
# Constants
# ==============================================================================

# Where the backup scripts are located. Right now they live beside the master
# script.
GROUP_LIST_PATH="`dirname "$0"`"
ACTION_PATH="$1"

# Hard coded for the moment. Don't need much flexibility.
LOG_FILE="../logs/master-log"


# ==============================================================================
# Main program
# ==============================================================================

if [ $EUID -ne 0 ] ; then
	echo "You must run this as root." >&2
	exit 1
fi

cd "`dirname "$0"`"

# Set up logging
#if [ ! -d "`dirname "$LOG_FILE"`" ] ; then
#	mkdir "`dirname "$LOG_FILE"`"
#fi
#touch "$LOG_FILE"   # Create it or indicate we ran, so timestamp reflects last execute time.

# Find the group path.
if [ ! -d "${GROUP_LIST_PATH}/${ACTION_PATH}" ] ; then
	echo "Invalid group specified" >&2
	exit 1
fi
cd "${GROUP_LIST_PATH}/${ACTION_PATH}"

# Get the list of backup profiles to execute.
ACTION_LIST="`ls`"

# Execute all the backup script profiles.
# TODO: Add logging.
for backup_script in $ACTION_LIST ; do
	# Don't execute via the symlink, execute the script directly. It needs to know its path.
	SCRIPT_PATH="`readlink "./$backup_script"`"
	if [ -x "$SCRIPT_PATH" ] ; then
		echo "Executing backup action: $backup_script"

		#echo "\n\n"                                        >> "$LOG_FILE"
		#echo "=========================================\n" >> "$LOG_FILE"
		#echo "Script: $backup_script"                      >> "$LOG_FILE"
		#echo "=========================================\n" >> "$LOG_FILE"

		"./$SCRIPT_PATH" #>> "../$LOG_FILE"      # Account for the folder we stepped into.

		#if [ $# -eq 0 ] ; then
		#	echo " - Success"
		#else
		#	echo " - Failure"
		#fi
	fi
done
