#!/bin/sh

#
# This helper code assumes the script has already set the proper CWD.
#

# ==============================================================================
# Common functionality convenient for the various backup profile scripts.
# ==============================================================================

cleanse_backup() {
	# Cleanse the backup location and cd to it.
	rm -rf "$BACKUP_DIR" 2> /dev/null
	mkdir -p "$BACKUP_DIR"
}


# ==============================================================================
# Global functionality needed by the various backup profile scripts.
# ==============================================================================

# All backups need to be done as root.
if [ ${EUID} -ne 0 ]; then
	echo "Error: You must run backup scripts as root" >&2
	exit 1
fi

# Get basic info about the script.
SCRIPT_NAME="`basename "$0"`"
SCRIPT_PATH="`dirname "$0"`"

#
# Include the global config and the individual config.
# Requires "$BACKUP_GROUP" already be set.
#
source ../config/global.config
[ -f "../config/${SCRIPT_NAME}.config" ] && source "../config/${SCRIPT_NAME}.config"

# Build directory the script will output to and verify the necessary filesystem structure exists.
# Fail if the root back dir doesn't exist, but create the necessary subfolders if necessary.
# TODO: Currently delete any pre-existing backup in this spot. It's possible this is not desireable
# in all cases (such as an rsync that needs to be efficient), but for now nothing needs otherwise.
# Todo is to make this togglable by a flag from the sourcing script/action.
[ ! -d "$BACKUP_ROOT_DIR" ] && exit 1
BACKUP_DIR="${BACKUP_ROOT_DIR}/${BACKUP_GROUP}/${SCRIPT_NAME}/current"

[ -d "$BACKUP_DIR" ] && rm -rf "$BACKUP_DIR" 2> /dev/null
mkdir -p "$BACKUP_DIR"

cd "$BACKUP_DIR" || exit 1
