#!/bin/bash

# By: B-Con (Brad Conte: brad AT bradconte COM)
#
# This is a library of functions for dealing with script actions in my backup
# management system. The folder to be archived should have the name structure:
# 	NAME/current
# where "current" has the latest stuff to backup. Backups will be created with
# the naming structure:
# 	NAME/NAME_YYYY-MM-DD_HH-MM-SS.tar.EXT

# Summary: There are two functions of primary interest:
# 	execute_action() - finds the name of the script and executes it
# 	archive_action() - archives & rotates the backup path of the action
# Manager scripts call these for the actions they are handling.
# 	Call them back-to-back for a traditional backup & archive scheme. Or execute
# the backup script multiple times before archiving to only save periodic
# snapshots.


# ==============================================================================
# Constants
# ==============================================================================

# We must already be in the script's directory.
source "../config/global.config"

# For weekly backups, this is just over two months.
DEFAULT_NUM_BACKUPS=10


# ==============================================================================
# Function definitions
# ==============================================================================

# Creates the archive and sets its ownership and permissions.
# Assumes CWD is the action's backup path.
# Args:
#	1 = folder to backup
create_archive()
{
	local ACTION_NAME="$1"
	local BACKUP_SOURCE="current"

	if [ ! -d "$BACKUP_SOURCE" -a ! -f "$BACKUP_SOURCE" ]; then
		echo "Error: The canonical backup path `pwd`/${BACKUP_SOURCE} doesn't exist" >&2
		return 1
	fi

	# Don't bother backing up empty directories.
	if [ -z "`ls -A $BACKUP_SOURCE`" ]; then
		return 0
	fi

	local LATEST_BACKUP_FILE="`ls -t | grep -e "^${ACTION_NAME}" | head -n 1`"
	local NEW_BACKUP_SOURCE="${ACTION_NAME}_`date +%Y-%m-%d_%H-%M-%S`"
	local NEW_BACKUP_FILE="${NEW_BACKUP_SOURCE}.tar.gz"

	# Rename the to-archive folder to the base name of the archive file. This
	# allows the root file on extraction to be named properly and prevents
	# any backups from occuring while the archive is created, which would result
	# in a mixed state.
	mv "$BACKUP_SOURCE" "$NEW_BACKUP_SOURCE"
	tar -czf "$NEW_BACKUP_FILE" "$NEW_BACKUP_SOURCE"
	local SUCCESS=$?
	mv "$NEW_BACKUP_SOURCE" "$BACKUP_SOURCE"
	if [ $SUCCESS -ne 0 ]; then
		echo "Error: Failed to create archive $NEW_BACKUP_FILE" 2>&1
		return 1
	fi

	# Make the backups read-only and owned by root. This is safest.
	chown root:root "$NEW_BACKUP_FILE"
	chmod 444 "$NEW_BACKUP_FILE"

	# Note: Don't remove the "current" contents. The backups may use optimized
	# syncing that only updates modified files. Removing it would eliminate
	# that efficiency.

	# TODO: The below doesn't work properly since the root directory in each archive is named
	# differently, so the archives are never the exact same.
	# ---
	# If the backup is an exact duplicate of the previous one, delete the older one.
	# We don't need duplicates in the archive history. Keep the new one (not the old one)
	# to indicate how new the file contents were, we probably care more about
	# exactly how new the latest archive is rather than exactly how old it is.
	if [ ! -z "$LATEST_BACKUP_FILE" -a -x `which md5sum` ]; then
		local LATEST_BACKUP_FILE="`md5sum "$LATEST_BACKUP_FILE" | cut -f 1 -d ' '`"
		local CURRENT_CHECKSUM="`md5sum "$NEW_BACKUP_FILE" | cut -f 1 -d ' '`"
		if [ "$LATEST_BACKUP_FILE" = "$CURRENT_CHECKSUM" ]; then
			rm -f "$LATEST_BACKUP_FILE"
		fi
	fi
}

# Rotates/prunes the backups for the
# Assumes CWD is the action's backup path.
# Args:
#	1st = prepend-name for archives
#	2nd = number of archives to keep; if not set or 0 then use the default, if -1 then don't prune
rotate_backups()
{
	local ACTION_NAME="$1"
	local BACKUP_LIST="`ls -tr | grep -e "^${ACTION_NAME}"`"   # Reverse the list.

	# See if there's no pruning to be done.
	if [ -z "$BACKUP_LIST" -o $(( $2 )) -eq $(( -1 )) ]; then
		return 0
	fi

	if [ $(( $2 )) -ne -1 ]; then
		local NUM_BACKUPS=$DEFAULT_NUM_BACKUPS
		[ $(( $2 )) -gt 0 ] && NUM_BACKUPS=$2

		# Prune archives that aren't recent enough.
		# List is sorted oldest to newest. Grap all but the X most recent.
		if [ $(( `echo "$BACKUP_LIST" | wc -l` )) -gt $NUM_BACKUPS ]; then
			echo "$BACKUP_LIST" | head -n -$NUM_BACKUPS | xargs rm -f
		fi
	fi
}

# Executes the action script with the given name.
# Args:
#	1 = action *name* to execute
execute_action()
{
	ACTION_SCRIPT="$1"

	# cd to the folder with the action scripts.
	pushd "`dirname "$0"`/../actions" > /dev/null

	if [ ! -x "$ACTION_SCRIPT" ]; then
		echo "Error: Can't execute the specified script" >&2
		return 1
	fi

	"./$ACTION_SCRIPT"

	popd > /dev/null
}

# Archives the given action if it has a presense in the master backup location.
# Args:
#	1 = action *name* to backup
#	2 = number of backups to keep (optional)
archive_action()
{
	local ACTION_NAME="$1"

	if [ ! -d "$BACKUP_ROOT_DIR" ]; then
		echo "Error: Backup root dir doesn't exist." >&2
		return 1
	fi
	pushd "$BACKUP_ROOT_DIR" > /dev/null

	if [ ! -d "$ACTION_NAME" ]; then
		echo "Warning: Specified action $ACTION_PATH does not have a backup directory" >&2
		echo "         Creating directory"
		mkdir "$ACTION_NAME"
		chown b-con:data-storage "$ACTION_NAME"
		chmod 775 "$ACTION_NAME"
		return 1
	fi
	pushd "$ACTION_NAME" > /dev/null

	create_archive "$ACTION_NAME"
	rotate_backups "$ACTION_NAME" $2

	popd > /dev/null
	popd > /dev/null
}


# ==============================================================================
# General code to execute
# ==============================================================================

if [ $EUID -ne 0 ]; then
	echo "You need to run these scripts as root" >&2
	exit 1
fi
